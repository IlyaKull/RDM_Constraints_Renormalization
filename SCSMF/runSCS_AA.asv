function [energyHist,reportTimes,energyRig,DeltaLower,DeltaUpper,resHist,PD,countMisses] = runSCS_AA(modelStr,D,n,ops)


if nargin<4
    ops=struct(); % make empty structure because later we always ask: isfield(ops,'something')
end

PD=setProblemData(modelStr,D,n,ops);
disp('Created problem data structure with the following fields:')
disp(PD)

[FH] = setFunctionHandles(PD);

iter = 0;
tolReached=0;

energyHist=nan(ceil(PD.maxIter/PD.iterStride),2);
resHist=nan(ceil(PD.maxIter/PD.iterStride),3);
eInd=1; %index for energy history output

if isfield(PD,'warmStart')  %load variables from the end of a saved run
    disp('Warm start: loading (u,v) vector')
    u = PD.warmStart.u;
    v = PD.warmStart.v;
    fprintf('Continue counting iterations from where last run ended: iter = %d \n',PD.warmStart.lastIter)
    iter = iter + PD.warmStart.lastIter; %continue counting iterations from where last run stopped
    PD.maxIter = PD.maxIter + PD.warmStart.lastIter; 
    fprintf('Update maxIter to %d \n',PD.maxIter)
    PD.Minvh = PD.warmStart.Minvh;
    PD.const_hMh = PD.warmStart.const_hMh;
    PD.c = PD.warmStart.c;
    PD.b = PD.warmStart.b;
    PD.CGtol = PD.warmStart.CGtol;
    fprintf('Warm start: loading previous scaling parameters rho = %0.2g ; sigma = %0.2g \n',...
                            PD.warmStart.scale_rho,PD.warmStart.scale_sigma)
    PD.scale_sigma = PD.warmStart.scale_sigma;
    PD.scale_rho = PD.warmStart.scale_rho ;
    times = PD.warmStart.timeCounters;
else
    [u,v]=setInitialPt(PD);
    [PD.Minvh,PD.const_hMh,PD.c,PD.b]= computeMinvh(PD,FH);
    times=[0 0 0]; % [Aff CG Proj]
end
 
%% save data needed to warmStart 
PD.warmStart=struct();
PD.warmStart.Minvh = PD.Minvh;
PD.warmStart.const_hMh = PD.const_hMh;
PD.warmStart.c = PD.c;
PD.warmStart.b = PD.b;
PD.warmStart.scale_sigma = PD.scale_sigma;
PD.warmStart.scale_rho = PD.scale_rho ;

% Anderson acceleration - initialize memory
% AAlookbach=1 means no acceleration 
if PD.AAlookback>1
    uMem = nan(length(u),PD.AAlookback+1);
    vMem = nan(length(v),PD.AAlookback+1);
else
    uMem = nan(length(u),1);
    vMem = nan(length(v),1);
end
if PD.saveProgress
    dataFSpath=getenv('DATA'); %save files to DATA file system when working on cluster
    if isempty(dataFSpath)
        savePathAndFilename = PD.filename;
    else
        savePathAndFilename = [dataFSpath,'/translInvSpinChain/outFiles/matFiles/',PD.filename];
    end
    save(savePathAndFilename,'PD','-v7.3','-nocompression')        
end
%% display and stats stuff
colNames={'iteration','primalRes','dualRes','gapRes',pad('energy',16),'CGiters','CGres','T_CG','T_Proj','avAsymm','t_elapsed'};
colWidth=10;
% timeORiterInds= contains(colNames,'iter') | contains(colNames,'T_'); % don't include last t_elapsed
makeTableHeader(colNames,colWidth)


if ~isempty(PD.pool), ticBytes(PD.pool),end
ticRun=tic; % start time counter

% first iteration (avoid reading empty memory)
iter =iter+1;
[uMem(:,1),vMem(:,1),stats]=iterateSCS(u,v,iter,PD,FH);
clear u v
 AAcondNum=zeros(PD.maxIter,1);
 AAgammaNorm=AAcondNum;
 countMisses=0;
%% %%%%%% iteration loop
while (iter < PD.maxIter) && (~tolReached) 
    iter = iter +1;
    iPrev = mod(iter-1 + PD.AAlookback -1, PD.AAlookback) +1; %uMem(:,end) is only used for the AA step
    iNext = mod(iter + PD.AAlookback -1, PD.AAlookback) +1;
    
    if ~(iNext==1) || PD.AAlookback==1
        [uMem(:,iNext),vMem(:,iNext),stats]=iterateSCS(uMem(:,iPrev),vMem(:,iPrev),iter,PD,FH);

    else
        [uMem(:,end),vMem(:,end)]=iterateSCS(uMem(:,end-1),vMem(:,end-1),iter,PD,FH);
        [uMem,AAstatsU]= AndersonAcceleration(uMem,PD.AAtyp,PD.AAreg);
        [vMem,AAstatsV]= AndersonAcceleration(vMem,PD.AAtyp,PD.AAreg);
        AAcondNum(iter)=max(AAstatsU.condNum,AAstatsV.condNum);
        AAgammaNorm(iter)=max(AAstatsU.gammaNorm,AAstatsV.gammaNorm);
        % safeguarding: do next iteration 
        iter=iter+1; iNext = 2;
        [uMem(:,2),vMem(:,2),stats]=iterateSCS(uMem(:,1),vMem(:,1),iter,PD,FH);
        if norm([uMem(:,1);vMem(:,1)] - [uMem(:,2);vMem(:,2)]) > PD.AAsafeguard * norm([uMem(:,end);vMem(:,end)] - [uMem(:,end-1);vMem(:,end-1)]) 
            countMisses=countMisses+1;
            %            norm([uMem(:,1);vMem(:,1)] - [uMem(:,2);vMem(:,2)]) - PD.AAsafeguard * norm([uMem(:,end);vMem(:,end)] - [uMem(:,end-1);vMem(:,end-1)])
            uMem(:,1)=uMem(:,end); %revert to f(x) instead of x_AA
           vMem(:,1)=vMem(:,end);
           [uMem(:,2),vMem(:,2),stats]=iterateSCS(uMem(:,1),vMem(:,1),iter,PD,FH);
        end
        
    end
    
     
    times = times + [stats.T_Aff, stats.T_CG, stats.T_Proj];
    if stats.CGflag
        warning('CG did not converge, flag = %d, iters = %d, relres = %0.2g; target tolerance = %0.2g',stats.CGflag,stats.CGiters,stats.CGrelres,PD.CGtolFunc(iter))
    end
    % check convergence and display progress line 
    if ~mod(iter,PD.iterStride) | iter==PD.maxIter
         [energyHist(eInd,2),primalRes,dualRes,gapRes,tolReached ] = terminationCriteria(uMem(:,iNext),vMem(:,iNext),PD,FH);
         energyHist(eInd,1)=iter;
         resHist(eInd,:) = [primalRes,dualRes,gapRes];
         t_elapsed = toc(ticRun); % in seconds
         
% % % % % % % % % %DISPLAY ROW
%colNames ={'iteration','primalRes','dualRes','gapRes','energy', 'CGiters',     'CGres',        'T_CG',     'T_Proj',     'avAsymm',      't_elapsed'};
 colData = [iter,        primalRes,  dualRes,  gapRes, energyHist(eInd,2),    stats.CGiters, stats.CGrelres, stats.T_CG, stats.T_Proj, stats.avAsymm , t_elapsed];
 precision=[0,           0.3,        0.3,      0.3,    6.12,      0,             0.3,            0.2,        0.2,          0.2,            0.2];          
 printTableLine( colData, colWidth*ones(1,length(colNames)) + precision ); % add precision as decimal fraction to non iteger fields
% % % % % % % % % %END DISPLAY ROW
        eInd=eInd+1;
    end
    
    % save progress
    if (~mod(iter,PD.saveStride) | iter==PD.maxIter) & PD.saveProgress
		PD.warmStart.u =uMem(:,iNext);
		PD.warmStart.v =vMem(:,iNext);
		PD.warmStart.lastIter =iter;
		PD.warmStart.CGtol = PD.CGtolFunc(iter); %set the current tolerance to be the initial one for the next run
		PD.warmStart.timeCounters=times;  % these counter accumulate through warmstart because iterations also keep counting. 
                        % this way the averages remain true
        timeOfLastSave=   datestr(now,21);  %this variable is saved and used for monitoring the run 
%         save(PD.filename,'-append')
         save(savePathAndFilename,'PD','-v7.3','-nocompression')
    end
        
   
end


%% more display and stats
if ~isempty(PD.pool)
    poolBytes=tocBytes(PD.pool)
    PD.poolBytes=poolBytes;
end

summString1=[];
if  iter==PD.maxIter 
    summString1 = 'Reached maxIter;'; 
end
if tolReached
   summString1 = [summString1,' Termination criteria were met.'];
else
   summString1 = [summString1,' Termination criteria were NOT met.'];
end
fprintf('Iteration ended, reason: %s \n',summString1)
reportTimes= times/iter;
fprintf('Average times(sec): T_Aff = %0.2g,     T_CG = %0.2g,    T_PSD = %0.2g \n', reportTimes )


%% compute rigorous lower bound from dual vars

[energyRig,violation]=FeasibleDualPtSCSmod(uMem(:,iNext),PD);
fprintf('Rigorous energy from solution: %0.12g \n',energyRig)
fprintf('Exact energy :                 %0.12g \n', PD.Eexact)
DeltaLower=PD.Eexact - energyRig;
fprintf('Lower bound energy difference : %0.12g \n', DeltaLower )
DeltaUpper= PD.Eupper - PD.Eexact;
fprintf('Upper bound energy difference : %0.12g \n', DeltaUpper)

PD.results.energyRig = energyRig;
PD.results.DeltaLower = DeltaLower;


% if PD.saveProgress, save(PD.filename,'-append'), end
if PD.saveProgress,  save(savePathAndFilename,'PD','-v7.3','-nocompression'), end
 


end


